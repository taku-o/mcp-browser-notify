---
description: 
globs: 
alwaysApply: false
---
# 開発手順（Container-Use環境での開発ワークフロー）

**重要**: すべてのファイル操作、コード作業、シェル操作は**必ずContainer-Use環境**を使用して実行する。単純なリクエストや汎用的なリクエストであっても例外なく環境を使用すること。

## 基本ワークフロー

1. **環境の作成・確認**: Container-Use環境でプロジェクトを開く
   * `mcp__container-use__environment_open`を使用してプロジェクト環境を作成
   * 環境IDを取得し、以降の作業で使用

2. **作業ブランチ作成**: 環境内でmasterから新しい作業ブランチを作成
   * Gitブランチ名は実装する内容から適当に決める
   * 作成元のGitブランチはmasterを使用
   * 環境のGitツールが自動的にGit操作を処理

3. **修正実装**: 環境内で指示された修正を実装
   * すべてのファイル操作は`mcp__container-use__environment_file_*`ツールを使用
   * コマンド実行は`mcp__container-use__environment_run_cmd`を使用
   * 複数回の修正でコミットログが汚くなることは気にしない

4. **作業完了**: 環境内で作業を完了し、作業ブランチの状態を維持
   * **重要**: ユーザーに`git checkout <branch_name>`でブランチを確認する方法を通知する

5. **継続作業**: 既存の環境と作業ブランチで追加修正を実行
   * エラー修正などは継続作業として既存ブランチで実行
   * 別タスクの場合は新しい作業ブランチを作成

## Container-Use環境での重要な制約

* **Git CLI禁止**: 環境内でgit cliの直接使用は避ける
  * 環境ツールがGit操作を自動処理
  * `.git`の手動変更は環境の整合性を損なう可能性

* **ファイル操作**: 必ず専用ツールを使用
  * `mcp__container-use__environment_file_read`: ファイル読み取り
  * `mcp__container-use__environment_file_write`: ファイル書き込み
  * `mcp__container-use__environment_file_list`: ディレクトリ一覧
  * `mcp__container-use__environment_file_delete`: ファイル削除

* **コマンド実行**: `mcp__container-use__environment_run_cmd`を使用

## 注意事項
* masterブランチでの直接作業は避ける
* 作業ブランチの確認を怠らない
* コミットメッセージは作業内容を簡潔に記載
* **作業完了時は必ずブランチ確認方法をユーザーに通知する**