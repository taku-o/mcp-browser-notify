---
description: 
globs: 
alwaysApply: false
---
# リファクタリング

# 仕様の再検討
* Model Context Protocol (以降、MCPと略する)として動作する。
    * このツールはAIから呼び出される。
* ユーザーにメッセージを送信できる。
    * 作業の終了時、もしくはユーザーの何らかの確認作業が必要な時に、ユーザーにメッセージを送信するために利用される。
    * 送信するメッセージは指定できる。通常はAIがそのメッセージを状況に合わせて決める。
* 想定環境として、CursorのAIから起動する。
* メッセージを受ける環境は、PC、Desktop Mac、iPhone、Android。
    * AIの起動環境と、メッセージを受ける環境は異なることがある。
* 外部サービスを利用して良い。
    * しかし、大量のリクエストでサーバが死んだり、お金が必要になるとそれは困る。
    * 外部サービスを利用して作る場合は、個別のユーザーごとに、その外部サービスのアカウントを用意する想定だと都合が良い。
        * その場合、設定方法が必要になるでしょう。
    * もちろん、外部サービスを利用しなくても良い。
* 開発言語は何を使っても良い。

# 提案仕様
* PC/Desktop Mac (Webプッシュ通知):
    * サービス: Firebase Cloud Messaging (FCM) などのWebプッシュ通知サービスを利用。
    * 実装:
        * ユーザーがMCPツールを利用開始する際に、Webサイトを通じてWebプッシュ通知の許可を得ます。
        * 許可されたSubscription情報を、MCPツール専用のDB（例: MongoDB Atlas, Supabaseなど）にユーザーIDと紐付けて保存します。
        * AIから呼び出された際に、対象ユーザーのSubscription情報をDBから取得し、FCMなどのAPI経由で通知を送信します。
    * メリット:
        * ブラウザを閉じても通知可能。
        * 無料で利用開始でき、大量利用でも比較的低コスト。
        * 開発コストが比較的低い。
    * デメリット:
        * ユーザーが通知を許可する必要がある。
        * iOS Safariでは、ウェブサイトをホーム画面に追加（PWA化）してもらう手間がある。
